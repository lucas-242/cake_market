// Mocks generated by Mockito 5.1.0 from annotations
// in cake/test/modules/product/repositories/product_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:cake/modules/product/data/datasources/product_back4app_datasource.dart'
    as _i3;
import 'package:cake/modules/product/product.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeProduct_0 extends _i1.Fake implements _i2.Product {}

class _FakeProductTag_1 extends _i1.Fake implements _i2.ProductTag {}

/// A class which mocks [ProductBack4AppDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductBack4AppDatasource extends _i1.Mock
    implements _i3.ProductBack4AppDatasource {
  MockProductBack4AppDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Product>> getRecommended() =>
      (super.noSuchMethod(Invocation.method(#getRecommended, []),
              returnValue: Future<List<_i2.Product>>.value(<_i2.Product>[]))
          as _i4.Future<List<_i2.Product>>);
  @override
  _i4.Future<List<_i2.Product>> search(_i2.ProductFilter? filter) =>
      (super.noSuchMethod(Invocation.method(#search, [filter]),
              returnValue: Future<List<_i2.Product>>.value(<_i2.Product>[]))
          as _i4.Future<List<_i2.Product>>);
  @override
  _i4.Future<_i2.Product> add(_i2.Product? product) =>
      (super.noSuchMethod(Invocation.method(#add, [product]),
              returnValue: Future<_i2.Product>.value(_FakeProduct_0()))
          as _i4.Future<_i2.Product>);
  @override
  _i4.Future<_i2.ProductTag> addTag(_i2.ProductTag? tag) =>
      (super.noSuchMethod(Invocation.method(#addTag, [tag]),
              returnValue: Future<_i2.ProductTag>.value(_FakeProductTag_1()))
          as _i4.Future<_i2.ProductTag>);
  @override
  _i4.Future<void> deleteTag(_i2.ProductTag? tag) =>
      (super.noSuchMethod(Invocation.method(#deleteTag, [tag]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
