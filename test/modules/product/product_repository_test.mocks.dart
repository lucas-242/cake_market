// Mocks generated by Mockito 5.1.0 from annotations
// in cake/test/modules/product/product_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:cake/modules/product/data/datasources/product_back4app_datasource.dart'
    as _i4;
import 'package:cake/modules/product/product.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:parse_server_sdk/parse_server_sdk.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeParseCoreData_0 extends _i1.Fake implements _i2.ParseCoreData {}

class _FakeParseNetworkResponse_1 extends _i1.Fake
    implements _i2.ParseNetworkResponse {}

class _FakeParseNetworkByteResponse_2 extends _i1.Fake
    implements _i2.ParseNetworkByteResponse {}

/// A class which mocks [ParseHTTPClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockParseHTTPClient extends _i1.Mock implements _i2.ParseHTTPClient {
  MockParseHTTPClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set additionalHeaders(Map<String, String>? additionalHeaders) => super
      .noSuchMethod(Invocation.setter(#additionalHeaders, additionalHeaders),
          returnValueForMissingStub: null);
  @override
  _i2.ParseCoreData get data => (super.noSuchMethod(Invocation.getter(#data),
      returnValue: _FakeParseCoreData_0()) as _i2.ParseCoreData);
  @override
  _i3.Future<_i2.ParseNetworkResponse> get(String? path,
          {_i2.ParseNetworkOptions? options,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [path],
                  {#options: options, #onReceiveProgress: onReceiveProgress}),
              returnValue: Future<_i2.ParseNetworkResponse>.value(
                  _FakeParseNetworkResponse_1()))
          as _i3.Future<_i2.ParseNetworkResponse>);
  @override
  _i3.Future<_i2.ParseNetworkByteResponse> getBytes(String? path,
          {_i2.ParseNetworkOptions? options,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#getBytes, [path],
                  {#options: options, #onReceiveProgress: onReceiveProgress}),
              returnValue: Future<_i2.ParseNetworkByteResponse>.value(
                  _FakeParseNetworkByteResponse_2()))
          as _i3.Future<_i2.ParseNetworkByteResponse>);
  @override
  _i3.Future<_i2.ParseNetworkResponse> put(String? path,
          {String? data, _i2.ParseNetworkOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [path], {#data: data, #options: options}),
              returnValue: Future<_i2.ParseNetworkResponse>.value(
                  _FakeParseNetworkResponse_1()))
          as _i3.Future<_i2.ParseNetworkResponse>);
  @override
  _i3.Future<_i2.ParseNetworkResponse> post(String? path,
          {String? data, _i2.ParseNetworkOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [path], {#data: data, #options: options}),
          returnValue: Future<_i2.ParseNetworkResponse>.value(
              _FakeParseNetworkResponse_1())) as _i3
          .Future<_i2.ParseNetworkResponse>);
  @override
  _i3.Future<_i2.ParseNetworkResponse> postBytes(String? path,
          {_i3.Stream<List<int>>? data,
          _i2.ParseNetworkOptions? options,
          _i2.ProgressCallback? onSendProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#postBytes, [
                path
              ], {
                #data: data,
                #options: options,
                #onSendProgress: onSendProgress
              }),
              returnValue: Future<_i2.ParseNetworkResponse>.value(
                  _FakeParseNetworkResponse_1()))
          as _i3.Future<_i2.ParseNetworkResponse>);
  @override
  _i3.Future<_i2.ParseNetworkResponse> delete(String? path,
          {_i2.ParseNetworkOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [path], {#options: options}),
              returnValue: Future<_i2.ParseNetworkResponse>.value(
                  _FakeParseNetworkResponse_1()))
          as _i3.Future<_i2.ParseNetworkResponse>);
}

/// A class which mocks [ProductBack4AppDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductBack4AppDatasource extends _i1.Mock
    implements _i4.ProductBack4AppDatasource {
  MockProductBack4AppDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i5.Product>> get() =>
      (super.noSuchMethod(Invocation.method(#get, []),
              returnValue: Future<List<_i5.Product>>.value(<_i5.Product>[]))
          as _i3.Future<List<_i5.Product>>);
  @override
  _i3.Future<List<_i5.Product>> getRecommended() =>
      (super.noSuchMethod(Invocation.method(#getRecomended, []),
              returnValue: Future<List<_i5.Product>>.value(<_i5.Product>[]))
          as _i3.Future<List<_i5.Product>>);
  @override
  _i3.Future<List<_i5.Product>> search(_i5.ProductFilter? filter) =>
      (super.noSuchMethod(Invocation.method(#search, [filter]),
              returnValue: Future<List<_i5.Product>>.value(<_i5.Product>[]))
          as _i3.Future<List<_i5.Product>>);
}
